// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package go_pubsub

import (
	"google.golang.org/protobuf/runtime/protoiface"
	"io"
	"sync"
)

// Ensure, that IPubSubMock does implement IPubSub.
// If this is not the case, regenerate this file with moq.
var _ IPubSub = &IPubSubMock{}

// IPubSubMock is a mock implementation of IPubSub.
//
// 	func TestSomethingThatUsesIPubSub(t *testing.T) {
//
// 		// make and configure a mocked IPubSub
// 		mockedIPubSub := &IPubSubMock{
// 			DecodeBodyFunc: func(body io.ReadCloser) ([]byte, error) {
// 				panic("mock out the DecodeBody method")
// 			},
// 			SubmitResultsFunc: func(topicID string, submission protoiface.MessageV1) error {
// 				panic("mock out the SubmitResults method")
// 			},
// 		}
//
// 		// use mockedIPubSub in code that requires IPubSub
// 		// and then make assertions.
//
// 	}
type IPubSubMock struct {
	// DecodeBodyFunc mocks the DecodeBody method.
	DecodeBodyFunc func(body io.ReadCloser) ([]byte, error)

	// SubmitResultsFunc mocks the SubmitResults method.
	SubmitResultsFunc func(topicID string, submission protoiface.MessageV1) error

	// calls tracks calls to the methods.
	calls struct {
		// DecodeBody holds details about calls to the DecodeBody method.
		DecodeBody []struct {
			// Body is the body argument value.
			Body io.ReadCloser
		}
		// SubmitResults holds details about calls to the SubmitResults method.
		SubmitResults []struct {
			// TopicID is the topicID argument value.
			TopicID string
			// Submission is the submission argument value.
			Submission protoiface.MessageV1
		}
	}
	lockDecodeBody    sync.RWMutex
	lockSubmitResults sync.RWMutex
}

// DecodeBody calls DecodeBodyFunc.
func (mock *IPubSubMock) DecodeBody(body io.ReadCloser) ([]byte, error) {
	if mock.DecodeBodyFunc == nil {
		panic("IPubSubMock.DecodeBodyFunc: method is nil but IPubSub.DecodeBody was just called")
	}
	callInfo := struct {
		Body io.ReadCloser
	}{
		Body: body,
	}
	mock.lockDecodeBody.Lock()
	mock.calls.DecodeBody = append(mock.calls.DecodeBody, callInfo)
	mock.lockDecodeBody.Unlock()
	return mock.DecodeBodyFunc(body)
}

// DecodeBodyCalls gets all the calls that were made to DecodeBody.
// Check the length with:
//     len(mockedIPubSub.DecodeBodyCalls())
func (mock *IPubSubMock) DecodeBodyCalls() []struct {
	Body io.ReadCloser
} {
	var calls []struct {
		Body io.ReadCloser
	}
	mock.lockDecodeBody.RLock()
	calls = mock.calls.DecodeBody
	mock.lockDecodeBody.RUnlock()
	return calls
}

// SubmitResults calls SubmitResultsFunc.
func (mock *IPubSubMock) SubmitResults(topicID string, submission protoiface.MessageV1) error {
	if mock.SubmitResultsFunc == nil {
		panic("IPubSubMock.SubmitResultsFunc: method is nil but IPubSub.SubmitResults was just called")
	}
	callInfo := struct {
		TopicID    string
		Submission protoiface.MessageV1
	}{
		TopicID:    topicID,
		Submission: submission,
	}
	mock.lockSubmitResults.Lock()
	mock.calls.SubmitResults = append(mock.calls.SubmitResults, callInfo)
	mock.lockSubmitResults.Unlock()
	return mock.SubmitResultsFunc(topicID, submission)
}

// SubmitResultsCalls gets all the calls that were made to SubmitResults.
// Check the length with:
//     len(mockedIPubSub.SubmitResultsCalls())
func (mock *IPubSubMock) SubmitResultsCalls() []struct {
	TopicID    string
	Submission protoiface.MessageV1
} {
	var calls []struct {
		TopicID    string
		Submission protoiface.MessageV1
	}
	mock.lockSubmitResults.RLock()
	calls = mock.calls.SubmitResults
	mock.lockSubmitResults.RUnlock()
	return calls
}
